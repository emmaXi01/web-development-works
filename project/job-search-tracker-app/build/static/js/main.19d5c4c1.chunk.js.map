{"version":3,"sources":["logo.jpg","spinner.svg","services.js","messages.js","components/Login.jsx","components/Nav.jsx","options.js","components/jobs/JobForm.jsx","components/jobs/Job.jsx","components/jobs/JobList.jsx","components/jobs/Sort.jsx","components/jobs/JobsReview.jsx","components/Footer.jsx","components/jobs/JobTrackerApp.jsx","components/App.jsx","serviceWorker.js","index.js"],"names":["module","exports","convertNetworkError","err","message","convertServiceError","Promise","reject","messages","Login","onLogin","useState","newUsername","setNewUsername","isLoading","setIsLoading","errorText","setErrorText","className","src","logo","alt","onChange","e","target","value","spinner","onClick","username","trim","fetch","method","headers","Headers","body","JSON","stringify","catch","then","response","ok","json","user","errMessages","errorCode","username_required","Nav","onLogout","onBack","options","JobForm","job","onAdd","onUpdate","company","setCompany","position","setPosition","status","setStatus","appliedDate","setAppliedDate","interview1Date","setInterview1Date","interview2Date","setInterview2Date","offerDate","setOfferDate","url","setUrl","location","setLocation","description","setDescription","onSubmit","event","preventDefault","newJob","Object","keys","length","constructor","jobId","type","required","map","item","index","key","placehold","rows","cols","Job","onRemoveJob","onShowJob","data-job-id","dataset","JobList","jobs","jobList","useMemo","Sort","onSort","sortTasks","name","JobsReview","appliedJobs","setAppliedJobs","interviewingJobs","setInterviewingJobs","offerJobs","setOfferJobs","rejectedJobs","setRejectedJobs","unGroup","setUnGroup","order","setOrder","useEffect","sort","job1","job2","applied","interview","offer","rejected","others","push","grouping","orderOption","Footer","JobTrackerApp","showJobList","setShowJobList","setJobs","setJob","updateJobList","credentials","fetchJobList","content","removeJob","fetchJob","addJob","updateJob","App","isLoggedIn","userState","setUserState","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console"],"mappings":"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","file":"static/js/main.19d5c4c1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.09b9f758.jpg\";","module.exports = __webpack_public_path__ + \"static/media/spinner.05360875.svg\";","const convertNetworkError = (err) => {\n    return {\n        message: 'network error',\n        err\n    };\n};\n\nconst convertServiceError = (err) => Promise.reject(err);\n\n//session\nexport const fetchLoginStatus = () => {\n    return fetch('/session', {\n        method: 'GET',\n        headers: new Headers({\n            'content-type': 'application/json'\n        }),\n    })\n    .catch( convertNetworkError )\n    .then( response => {\n        if(!response.ok) {\n            return response.json().then( convertServiceError );\n        }\n\n        return response.json();\n    });\n};\n\nexport const login = (username) => {\n    return fetch('/session', {\n        method: 'POST',\n        headers: new Headers({\n            'content-type': 'application/json'\n        }),\n        body: JSON.stringify({ username }),\n    })\n    .catch( convertNetworkError )\n    .then( response => {\n        if(!response.ok) {\n            return response.json().then( convertServiceError );\n        }\n\n        return response.json();\n    });\n};\n\nexport const logout = () => {\n    return fetch('/session', {\n        method: 'DELETE',\n        headers: new Headers({\n            'content-type': 'application/json'\n        }),\n    })\n    .catch( convertNetworkError )\n    .then( response => {\n        if(!response.ok) {\n            return response.json().then( convertServiceError );\n        }\n\n        return;\n    });\n};\n\n//job appliaction\nexport const fetchJobList = (username) => {\n    return fetch(`/jobs/${username}`, {\n        method: 'GET',\n        headers: new Headers({\n            'content-type': 'application/json'\n        }),\n        credentials: 'include',\n    })\n    .catch( convertNetworkError )\n    .then( response => {\n        if(!response.ok) {\n            return response.json().then( convertServiceError );\n        }\n\n        return response.json();\n    });\n};\n\nexport const addJob = ( username, job ) => {\n    return fetch(`/jobs/${username}`, {\n        method: 'POST',\n        headers: new Headers({\n            'content-type': 'application/json'\n        }),\n        body: JSON.stringify({ job }),\n        credentials: 'include',\n    })\n    .catch( convertNetworkError )\n    .then( response => {\n        if(!response.ok) {\n            return response.json().then( convertServiceError );\n        }\n\n        return response.json();\n    });\n};\n\nexport const fetchJob = (username, jobId) => {\n    return fetch(`/jobs/${username}/${jobId}`, {\n        method: 'GET',\n        headers: new Headers({\n            'content-type': 'application/json'\n        }),\n        credentials: 'include',\n    })\n    .catch( convertNetworkError )\n    .then( response => {\n        if(!response.ok) {\n            return response.json().then( convertServiceError );\n        }\n\n        return response.json();\n    });\n};\n\nexport const removeJob = ( username, jobId ) => {\n    return fetch(`/jobs/${username}/${jobId}`, {\n        method: 'DELETE',\n        headers: new Headers({\n            'content-type': 'application/json'\n        }),\n        credentials: 'include',\n    })\n    .catch( convertNetworkError )\n    .then( response => {\n        if(!response.ok) {\n            return response.json().then( convertServiceError );\n        }\n\n        return;\n    });\n};\n\nexport const updateJob = (username, jobId, job) => {\n    return fetch(`/jobs/${username}/${jobId}`, {\n        method: 'PUT',\n        headers: new Headers({\n            'content-type': 'application/json'\n        }),\n        body: JSON.stringify({ job }),\n        credentials: 'include',\n    })\n    .catch( convertNetworkError )\n    .then( response => {\n        if(!response.ok) {\n            return response.json().then( convertServiceError );\n        }\n\n        return response.json();\n    });\n};\n","const messages = {\n    'username_required': \"pleaser enter an non_empty username\",\n    'no_valid_session': \"User not found, please refresh and login!\",\n    'login_denied': \"Bad login! Please enter valid username\",\n    'action_not_permitted': \"username is not correct\",\n    'no such_taskId': \"Job id is not correct, please check it\",\n    'failed_to_update': \"The Job does not exist\",\n    'missing_text': \"Job company and/or Job position is empty, please enter it!\",\n    'network_error': \"There is a problem connecting to the network, please try again!\",\n};\n\nexport default messages;","import React, {useState} from 'react';\nimport { login } from '../services';\nimport errMessages from '../messages';\nimport spinner from '../spinner.svg';\nimport logo from '../logo.jpg'\n\nfunction Login({ onLogin }) {\n    const[newUsername, setNewUsername] = useState('');\n    const [isLoading, setIsLoading] = useState(false);\n    const [errorText, setErrorText] = useState('');\n    \n\n    const onTextChange = (e) => {\n        setNewUsername(e.target.value);\n    };\n\n    const performLogin = () => {\n        if(!newUsername || newUsername.trim() === \"\") {\n            setErrorText(errMessages.username_required);\n            return;\n        }\n\n        setErrorText('');\n        setIsLoading(true);\n\n        login(newUsername)\n        .then( (user) => {\n            onLogin(user.username)\n        })\n        .catch( (err) => {\n            setErrorText(errMessages[err.errorCode]);\n            setIsLoading(false);\n        });\n    };\n\n    return(\n        <div className=\"login-container\">\n            <div className=\"logo\">\n                <img className=\"app-logo\" src={logo} alt=\"logo\"/>\n            </div>\n            <h4 className=\"greeting\">hello :)</h4>\n            <p className=\"error\">{errorText}</p>\n            <div className=\"login-body\">\n                <input className=\"username\" onChange={onTextChange} value={newUsername}/> \n                { isLoading ?\n                    <img alt=\"spinner\" src={spinner}/> :\n                    <button className=\"to-login\" onClick={ performLogin }>Login</button> \n                }\n            </div>       \n        </div>\n    );\n}\n\nexport default Login;","import React from 'react';\nimport { logout } from '../services';\nimport logo from '../logo.jpg'\n\nfunction Nav({ username, onLogout, onBack }) {\n\n    const handleLogout = () => {\n        logout()\n        .then( () => onLogout() );\n    };\n    \n    const back = () => {\n        onBack(username)\n    }\n    \n    return (\n        <nav className=\"header\">\n            <ul>\n                <li><img className=\"nav-logo\" src={logo} alt=\"logo\"/></li>\n                <li className=\"app-name\"><span onClick={back} >JobTrackerXi</span></li>\n                <span>\n                    <li>{username}</li> \n                    <li className=\"to-logout\" onClick={handleLogout}>Logout</li>\n                </span>     \n            </ul>\n        </nav>\n        \n    );\n};\n\n\nexport default Nav;","const options = ['', 'applied', 'interview', 'offer', 'rejected'];   \n\nexport default options;","import React, { useState, useEffect }  from 'react';\nimport options from '../../options';\n\n\n\nfunction JobForm ({ username, job, onAdd, onUpdate, onBack }) { \n    const [company, setCompany] = useState(job.company);\n    const [position, setPosition] = useState(job.position);\n    const [status, setStatus] = useState(job.status);\n    const [appliedDate, setAppliedDate] = useState(job.appliedDate);\n    const [interview1Date, setInterview1Date] = useState(job.interview1Date);\n    const [interview2Date, setInterview2Date] = useState(job.interview2Date);\n    const [offerDate, setOfferDate] = useState(job.offerDate);\n    const [url, setUrl] = useState(job.url);\n    const [location, setLocation] = useState(job.location);\n    const[description, setDescription] = useState(job.description);\n   \n    const submitJob = (event) => {\n        event.preventDefault();\n        const newJob = { company: company,\n                         position: position,\n                         status: status,\n                         appliedDate: appliedDate,\n                         interview1Date: interview1Date,\n                         interview2Date: interview2Date,\n                         offerDate: offerDate,\n                         url: url,\n                         location: location,\n                         description: description,\n        }\n      \n        if(Object.keys(job).length === 0 && job.constructor === Object) {\n            onAdd(username, newJob); \n        } else {   \n           onUpdate(username, job.jobId, newJob)\n        }    \n    }\n\n    const back = () => {\n        onBack(username)\n    }\n\n    return (\n        <div className=\"job-form\">    \n            <form onSubmit={submitJob}>\n                <h2 className=\"title\">Job Info</h2>   \n                <div className=\"job-basic-info\">\n                    <div>\n                        <p>Company*: </p>\n                        <input className=\"job-company\" type=\"text\" \n                            onChange={(e)=>{setCompany(e.target.value)}} value={company} required/>\n                    </div>\n                    <div>\n                        <p> Job title*: </p>\n                        <input className=\"job-position\" type=\"text\" \n                            onChange={(e)=>{setPosition(e.target.value)}} value={position} required/>\n                    </div>    \n                    <div>\n                        <p>Status: \n                        <select className=\"options\" onChange={(e)=>{setStatus(e.target.value)}} value={status}>\n                            { options.map((item, index) => \n                                <option key={index} value={item}>\n                                    {item}\n                                </option>) }\n                        </select></p>\n                    </div>\n                </div>\n                <div className=\"log-dates\"> \n                    <div>\n                        <p>Applied date: </p>\n                        <input type=\"date\"  className=\"applicated-date\" \n                            onChange={(e)=>{setAppliedDate(e.target.value)}} value={appliedDate}/>\n                    </div>\n                    <div>\n                        <p>Interview1 date: </p>\n                        <input type=\"date\" className=\"interview1-date\" \n                            onChange={(e)=>{setInterview1Date(e.target.value)}} value={interview1Date}/>\n                    </div>\n                    <div>\n                        <p>Interview2 date: </p>\n                        <input type=\"date\"  className=\"interview2-date\" \n                            onChange={(e)=>{setInterview2Date(e.target.value)}} value={interview2Date}/>\n                    </div>\n                    <div>\n                        <p>Offer date: </p>\n                        <input type=\"date\" className=\"offer-date\" \n                            onChange={(e)=>{setOfferDate(e.target.value)}} value={offerDate}/>\n                    </div>\n                    <div>\n                        <p>Post URL: </p>\n                        <input className=\"url\" type=\"text\" placehold=\"+ add URL\" \n                            onChange={(e)=>{setUrl(e.target.value)}} value={url}/>\n                    </div>\n                    <div>\n                        <p>Location: </p>\n                        <input className=\"location\" type=\"text\" placehold=\"+ add location\" \n                            onChange={(e)=>{setLocation(e.target.value)}} value={location}/>\n                    </div>\n                </div>\n                <div>\n                    <p>Description: </p>\n                    <textarea className=\"description\" rows=\"4\" cols=\"100\" \n                            onChange={(e)=>{setDescription(e.target.value)}} value={description}></textarea>\n                </div> \n\n                <div>\n                    <input className=\"submit\" type=\"submit\" value=\"Submit\" />\n                </div> \n            </form> \n            <div className=\"back-home\">\n                <button className=\"to-back-home\" onClick={back}>Cancel</button>\n            </div>       \n        </div>\n    )\n};\n\nexport default JobForm;","import React from 'react';\n\nfunction Job({ username, job, onRemoveJob, onShowJob }) {\n    const showJob = (e) => {\n        const jobId = e.target.dataset.jobId;\n        onShowJob(username, jobId);\n    }\n\n    const removeJob = (e) => {\n        const jobId = e.target.dataset.jobId;\n        onRemoveJob(username, jobId);\n    }\n\n    return(\n        <li className=\"job\">\n            <span data-job-id={job.jobId} \n                    className=\"company\"\n                    onClick={showJob}>{job.company}</span>\n            <span data-job-id={job.jobId} \n                    className=\"position\">{job.position}</span>\n            <button data-job-id={job.jobId} \n                    className=\"to-remove-job\"\n                    onClick={removeJob}>delete</button>      \n        </li>      \n    );\n};\n\nexport default Job;","import React, { useMemo } from 'react';\nimport Job from './Job';\n\nfunction JobList({ username, jobs, onRemoveJob, onShowJob }) {\n\n    const jobList = useMemo(()=>{\n        return jobs.map( job => \n        <Job key={job.jobId}     \n              job={job} \n              username={username} \n              onRemoveJob={onRemoveJob}\n              onShowJob={onShowJob} />\n    )}, [jobs, onRemoveJob, username, onShowJob]);\n\n    return(\n        <ul className=\"job-list\">\n            {jobList}\n        </ul>  \n    );\n};\n\nexport default JobList;","import React from 'react';\n\nfunction Sort({ onSort }) {\n    const sortTasks = (e) => {\n        onSort(e.target.value);\n    }\n\n    return(\n        <div className=\"sort-panel\">\n            <label>Order:</label>\n            <input type=\"radio\" value=\"ORDER_ASC\" name=\"sort-option\" onClick={sortTasks} />\n            <label>A-Z</label>\n            <input type=\"radio\" value=\"ORDER_DESC\" name=\"sort-option\" onClick={sortTasks} />\n            <label>Z-A</label>\n        </div>\n    )\n}\n\nexport default Sort;"," import React, {useState, useEffect } from 'react';\n import JobList from './JobList';\n import Sort from './Sort';\n\n function JobsReview({ username, jobs, onRemoveJob, onShowJob }) {\n    const [appliedJobs, setAppliedJobs] = useState([]);\n    const [interviewingJobs, setInterviewingJobs] = useState([]);\n    const [offerJobs, setOfferJobs] = useState([]);\n    const[rejectedJobs, setRejectedJobs] = useState([]);\n    const [unGroup, setUnGroup] = useState([]);\n    const [order, setOrder] = useState('');\n\n\n    const grouping = (jobs, order) => {\n        switch(order) {\n            case \"ORDER_ASC\":\n                jobs.sort((job1, job2) => (job1.company > job2.company) ? 1 : -1);\n                break;\n            case \"ORDER_DESC\":\n                jobs.sort((job1, job2) => (job2.company > job1.company) ? 1 : -1);\n                break;\n            default:\n                break;\n        }\n\n        const applied = [], interview = [], offer = [], rejected=[], others =[];\n        for( let job of jobs ) {\n            switch(job.status) {\n                case \"applied\":\n                    applied.push(job);\n                    break;\n                case \"interview\":\n                   interview.push(job);\n                    break;\n                case \"offer\":\n                    offer.push(job);\n                    break;\n                case \"rejected\":\n                    rejected.push(job);\n                    break;\n                default:\n                    others.push(job);\n                    break;\n            }\n        }\n\n        setAppliedJobs(applied);\n        setInterviewingJobs(interview);\n        setOfferJobs(offer);\n        setRejectedJobs(rejected);\n        setUnGroup(others);\n    };\n\n    useEffect( () => {\n        if(jobs) {\n            grouping(jobs, order);\n        }\n    }, [jobs, order]);\n\n    const onSort = (orderOption) => {\n        setOrder(orderOption);\n    }\n\n    return (\n        <div>\n            <Sort onSort={onSort} />\n            <div className=\"jobs-panel\">\n                <div>\n                    <h4>APPLIED</h4>\n                    <h5>{appliedJobs.length} JOBS</h5>\n                    <JobList username={username} jobs={appliedJobs} onRemoveJob={onRemoveJob} onShowJob={onShowJob}/>\n                </div>\n                <div> \n                    <h4>INTERVIEW</h4>\n                    <h5>{interviewingJobs.length} JOBS</h5>\n                    <JobList username={username} jobs={interviewingJobs} onRemoveJob={onRemoveJob} onShowJob={onShowJob}/>\n                </div>\n                <div>\n                    <h4>OFFER</h4>\n                    <h5>{offerJobs.length} JOBS</h5>\n                    <JobList username={username} jobs={offerJobs} onRemoveJob={onRemoveJob} onShowJob={onShowJob}/>\n                </div>\n                <div>\n                    <h4>REJECTED</h4>\n                    <h5>{rejectedJobs.length} JOBS</h5>\n                    <JobList username={username} jobs={rejectedJobs} onRemoveJob={onRemoveJob} onShowJob={onShowJob}/>\n                </div>\n                <div>\n                    <h4>OTHERS</h4>\n                    <h5>{unGroup.length} JOBS</h5>\n                    <JobList username={username} jobs={unGroup} onRemoveJob={onRemoveJob} onShowJob={onShowJob}/>\n                </div>\n            </div>\n        </div>\n    );\n}\n\n export default JobsReview;","import React from 'react';\n\nfunction Footer() {\n    return (\n        <footer>\n            <ul className=\"footer-personal-info\">\n                <li>© 2020 JobTrackerXi </li>\n                <li> E-mail:xi.xi@husky.neu.edu </li>\n            </ul>\n        </footer>\n    )\n};\n\nexport default Footer;","import React, { useState, useEffect } from 'react';\nimport Nav from '../Nav';\nimport JobForm from './JobForm';\nimport JobsReview from './JobsReview'\nimport Footer from '../Footer';\nimport errMessages from '../../messages';\nimport {fetchJobList, \n        fetchJob,\n        addJob, \n        removeJob,\n        updateJob} from '../../services';\n\n\nfunction  JobTrackerApp({ username, onLogout }) {\n    const [showJobList, setShowJobList] = useState(true);\n    const [errorText, setErrorText] = useState('');\n    const [jobs, setJobs] = useState([]);  \n    const [job, setJob] = useState({});\n\n    const updateJobList = (username) => {\n        fetchJobList(username)\n        .then( (jobs) => {\n            setJobs(jobs);\n            setShowJobList(true);\n        })\n        .catch( err => {\n            setErrorText(errMessages[err.errorCode]);\n        })\n    }; \n           \n    useEffect( () => {\n        if(username) {\n            updateJobList(username);\n        }     \n    }, [username]);\n    \n    //show job application details\n    const onShowJob = (username, jobId) => {\n        fetchJob(username, jobId)\n        .then( (job) => {\n            setJob(job);\n            setShowJobList(false);\n        })\n        .catch( err => {\n            setErrorText(errMessages[err.errorCode]);\n        })\n    }\n\n    //add a new job application\n    const onAdd = (username, job) => {\n        addJob(username, job)\n        .then( () => {\n           updateJobList(username);\n        })\n        .catch( err => {\n            setErrorText(errMessages[err.errorCode]);\n        });\n    };\n\n    //update a job\n    const onUpdate = (username, jobId, job) => {\n        updateJob(username, jobId, job)\n        .then( () => {\n            updateJobList(username);\n            setJob({});\n        })\n        .catch( (err) => {\n            setErrorText(errMessages[err.errorCode]);\n        });\n    };\n\n    //remove a job application\n    const onRemoveJob = (username, jobId) => {\n        removeJob(username, jobId)\n        .then( () => {\n            updateJobList(username);\n        })\n        .catch( (err) => {\n            setErrorText(errMessages[err.errorCode]);\n        });\n    };\n\n    //back to home page\n    const onBack = (username) => {\n        updateJobList(username);\n    }\n\n    let content;\n    if(showJobList) {\n        content = <div>\n                        <JobsReview username={username} \n                                    jobs={jobs} \n                                    onRemoveJob={onRemoveJob}\n                                    onShowJob={onShowJob}/>\n                        <div className=\"outgoing\">\n                            <button className=\"to-add-job\" onClick={() => setShowJobList(false)}>+ Add Job</button>\n                        </div>\n                  </div> \n    } else {\n        content = <JobForm username={username}\n                           job={job}\n                           onAdd={onAdd}\n                           onUpdate={onUpdate}\n                           onBack={onBack}/>\n    }\n\n    return(\n        <div className=\"jobs-app\">   \n            <Nav username={username} onLogout={onLogout} onBack={onBack} />\n            <div className=\"error\">{errorText}</div>\n            {content} \n            <Footer/>     \n        </div>\n    )\n}\n\nexport default JobTrackerApp;\n","import React, { useState, useEffect} from 'react';\nimport Login from './Login';\nimport JobTrackerApp from './jobs/JobTrackerApp';\nimport { fetchLoginStatus } from '../services';\n\nimport '../app.css';\n\nfunction App() {\n  const [userState, setUserState] = useState({ isLoggedIn: false, username: ''});\n  \n  useEffect( () => {\n    fetchLoginStatus()\n    .then(user => {\n      setUserState({\n        isLoggedIn: true,\n        username: user.username,\n      });\n    });\n  }, []);\n \n  const onLogin = (username) => {\n      setUserState({\n        isLoggedIn: true,\n        username: username,\n      });\n  };\n\n  const onLogout = () => {\n    setUserState({\n      isLoggedIn: false,\n      username: ''\n    });\n  }\n\n  return(\n    <div className=\"app\">\n      { userState.isLoggedIn ? \n          <JobTrackerApp username={userState.username} onLogout={onLogout} /> :\n          <Login onLogin={onLogin} />\n       }\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}