{"version":3,"sources":["errMessages.js","ChatRoom/UserList.jsx","ChatRoom/Message.jsx","ChatRoom/MessageList.jsx","ChatRoom/AddMessage.jsx","ChatRoom/ChatRoom.jsx","services.js","Login.jsx","App.jsx","serviceWorker.js","index.js"],"names":["errMessages","UserList","userList","users","map","user","className","key","uid","username","Message","message","sender","timeStamp","text","MessageList","messageList","messages","index","AddMessage","onAdd","useState","newText","setNewText","onChange","e","target","value","onClick","ChatRoom","trackUserState","onLogout","trackError","setUsers","setMessages","updateUserList","fetch","method","credentials","catch","Promise","reject","errorCode","then","response","ok","json","err","updateMessageList","useEffect","intervalId","setInterval","clearInterval","headers","Headers","body","JSON","stringify","sendMessage","Login","error","onLogin","setUsername","App","content","isLoggedIn","userState","setUserState","setUid","setError","login","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.2eee99c8.chunk.js","sourcesContent":["const errMessages = {\n    'invalid-user': \"User not found, please login!\",\n    'login-unauthorized': \"Bad login! You are not permitted to view this content\",\n    'username-required': \"Username is required\",\n    'network-error': \"There is a problem connecting to the network, please try again!\",\n    'missing-text': \"The message content cannot be empty\",\n};\n\nexport default errMessages;","import React from 'react';\n\nfunction UserList({ users }) {\n    const userList = users.map( user => <li className=\"user\" key={user.uid}>{user.username}</li>);\n    return(\n        <ul className=\"users-list\">\n            <h3 className=\"title\">Users</h3>\n            {userList}\n        </ul>\n    );\n};\n\nexport default UserList;\n","import React from 'react';\n\nfunction Message({ message }) {\n    return(\n        <li className=\"message-info\">\n            <div className=\"meta-info\">\n                <span className=\"sender\">{message.sender}</span>\n                <span className=\"timestamp\">{message.timeStamp}</span>\n            </div>\n            <div className=\"text-info\">\n                <span className=\"message-text\">{message.text}</span>\n            </div>\n        </li>      \n    );\n};\n\nexport default Message;","import React from 'react';\nimport Message from './Message';\n\nfunction MessageList({ messages }) {\n    const messageList = messages.map((text, index) => <Message key={index} message={text}/>);\n    return(\n        <ul className=\"messages-list\">\n            <h3 className=\"title\">Chat Messages</h3>  \n            {messageList}\n        </ul>\n    );\n};\n\nexport default MessageList;\n\n","import React, {useState} from 'react';\n\nfunction AddMessage({ onAdd }) {\n    const [newText, setNewText] = useState('');\n\n    const submitMessage = () => {\n        if(newText) {\n            onAdd(newText);\n            setNewText('');\n        }\n    };\n\n    const onTextChange = (e) => {\n        setNewText(e.target.value);\n    };\n\n\n    return(\n        <div>\n            <label>Message: </label>\n            <input className=\"to-add-message\" onChange={onTextChange} value={newText}/>\n            <button className=\"to-send\" onClick={submitMessage}>Send</button>\n        </div>\n    )\n    \n};\n\nexport default AddMessage;","import React, {useState, useEffect} from 'react';\nimport UserList from './UserList';\nimport MessageList from './MessageList';\nimport AddMessage from './AddMessage';\nimport { fetchUsers, fetchMessages, sendMessage } from '../services';\n\nfunction ChatRoom({ uid, trackUserState, onLogout, trackError }) {\n    const [users, setUsers] = useState([]);\n    const [messages, setMessages] = useState([]);\n\n    const updateUserList = () => {\n        fetchUsers()\n        .then( (users) => {\n            setUsers(users);\n        })\n        .catch( (err) => {\n            trackError(err);\n            trackUserState();\n        });\n    };\n    \n    const updateMessageList = () => {\n        fetchMessages()\n        .then( (messages) => {\n            setMessages(messages);\n        })\n        .catch( (err) => {\n            trackError(err);\n            trackUserState();\n        });\n    };\n\n    useEffect( () => {\n        if(uid) {\n            updateUserList();\n            updateMessageList();\n            const intervalId = setInterval( () => {\n                updateUserList();\n                updateMessageList();\n            }, 3000);\n        \n            return function cleanup() {\n                clearInterval(intervalId);\n            };\n        }\n    },[uid]);\n\n    const onAdd =  text  => {\n        sendMessage({ text })\n        .then( (messages) => {\n            setMessages(messages);\n        })\n        .catch( (err) => {\n            trackError(err);\n        })\n    };\n\n    const handleLogout = () => {\n        onLogout();\n    };\n\n    return( \n        <div className=\"chat-panel\">\n             <h1 className=\"title\">Chat Room</h1>        \n             <div className=\"logout\">\n                <button className=\"to-logout\" onClick={handleLogout}>Sign out</button>\n             </div>\n             <div className=\"display-panel\">\n                <UserList users={users}/>\n                <MessageList messages={messages}/>\n             </div>\n             <div className=\"outgoing\">\n                <AddMessage onAdd={onAdd}/>    \n             </div>     \n        </div>\n    )\n};\n\nexport default ChatRoom;","export const fetchLoginStatus = () => {\n    return fetch('/session', {\n        method: 'GET',\n    })\n    .catch( () => Promise.reject({ errorCode: 'network-error' }))\n    .then( (response) => {\n        if(!response.ok) {\n            return response.json().then( (err) => Promise.reject(err) );\n        }\n\n        return response.json();\n    });\n};\n\nexport const login = (username) => {\n    return fetch('/session', {\n        method: 'POST',\n        headers: new Headers({\n            'content-type': 'application/json'\n        }),\n        body: JSON.stringify({ username }),\n    })\n    .catch( () => Promise.reject({ errorCode: 'network-error'}) )\n    . then( (response) => {\n        if(!response.ok) {\n            return response.json().then( err => Promise.reject(err) );\n        }\n        return response.json();\n    });\n};\n\nexport const fetchUsers = () => {\n    return fetch('/users', {\n        method: 'GET',\n        credentials: 'include',\n    })\n    .catch( () => Promise.reject({ errorCode: 'network-error' }) )\n    .then( (response) => {\n        if(!response.ok) {\n            return response.json().then( err => Promise.reject(err));\n        }\n        return response.json();\n    });\n};\n\nexport const fetchMessages = () => {\n    return fetch('/messages', {\n        method: 'GET',\n        credentials: 'include',  // use cookie\n    })\n    .catch( () => Promise.reject({ errorCode: 'network-error'}) )\n    .then( (response) => {\n        if(!response.ok) {\n            return response.json().then( (err) => Promise.reject(err) );\n        }\n        return response.json();\n    });\n};\n\nexport const sendMessage = ({ text }) => {\n    return fetch('/messages', {\n        method: 'POST',\n        headers: new Headers({\n            'content-type': 'application/json'\n        }),\n        body: JSON.stringify({ text }),\n        credentials: 'include',\n    })\n    .catch( () => Promise.reject({ errorCode: 'network-error' }) )\n    .then( (response) => {\n        if(!response.ok) {\n            return response.json().then( (err) => Promise.reject(err) )\n        }\n        return response.json();\n    });\n};\n\nexport const logout = () => {\n    return fetch('/session', {\n        method: 'DELETE',\n        credentials: 'include',\n    })\n    .catch( () => Promise.reject({ errorCode: 'network-error' }) )\n    .then( (response) => {\n        if(!response.ok) {\n            return response.json().then( err => Promise.reject(err));\n        }\n        return;\n    });\n};","import React, {useState} from 'react';\n\nfunction Login({ error, onLogin }) {\n    const[username, setUsername] = useState('');\n\n    const onTextChange = (e) => {\n        setUsername(e.target.value);\n    };\n\n    const submitUser = () => {\n        if(username) {\n            onLogin(username);\n            setUsername('');\n        }\n    };\n\n    return(\n        <div className=\"login-panel\">\n            <input className=\"username\" onChange={onTextChange} value={username}/>\n            <button className=\"to-login\" onClick={submitUser}>Sign in</button>\n        </div>\n    )\n}\n\nexport default Login;","import React, {useState, useEffect} from 'react';\nimport errMessages from './errMessages';\nimport { fetchLoginStatus, login, logout } from './services';\nimport ChatRoom from './ChatRoom/ChatRoom';\nimport Login from './Login';\n\nimport './App.css';\n\nfunction App() {\n  const [userState, setUserState] = useState({ isLoggedIn: false });\n  const [uid, setUid] = useState('');\n  const [error, setError] = useState('');\n\n  useEffect( () => {\n    fetchLoginStatus()\n    .then( uid => {\n      setUserState({\n        isLoggedIn: true\n      });\n      setUid(uid);\n    });\n  }, []);\n\n  const onLogin = (username) => {\n    login(username)\n    .then( uid => {\n      setUserState({\n        isLoggedIn: true\n      });\n      setUid(uid);\n      setError('');\n    })\n    .catch( (err) => {\n      setError(err.errorCode);\n    });\n  };\n\n  const onLogout = () => {\n    logout()\n    .then( () => {\n      setUserState({\n        isLoggedIn: false\n      });\n      setUid('');\n      setError('');   \n    })\n  };\n\n  const trackUserState  = () => {\n    setUserState({\n      isLoggedIn: false\n    });\n  };\n\n  const trackError = (err) => {\n    setError(err.errorCode);\n  };\n\n  let content;\n  if(userState.isLoggedIn) {\n    content = <ChatRoom uid={uid} trackUserState={trackUserState} onLogout={onLogout} trackError={trackError}/>;\n  } else {\n    content = <Login error={error} onLogin={onLogin}/>;\n  };\n\n  return(\n    <div className=\"chat-app\">\n      <div className=\"status\">{errMessages[error]}</div>\n      { content }\n    </div>\n  )\n\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}